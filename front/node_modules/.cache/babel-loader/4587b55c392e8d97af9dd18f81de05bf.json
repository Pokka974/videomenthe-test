{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pokka\\\\Desktop\\\\DEV\\\\videomenthe-test\\\\front\\\\src\\\\components\\\\VideoPlayer.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nimport { Ratio } from 'react-bootstrap';\nimport { FaPlay } from 'react-icons/fa';\nimport { FaPause } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction VideoPlayer(_ref) {\n  _s();\n\n  let {\n    video\n  } = _ref;\n  const videoRef = useRef();\n  const inputRef = useRef();\n  const progressRef = useRef();\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [duration, setDuration] = useState(0);\n  const [curentTime, setCurrentTime] = useState(0);\n  const pathToVideo = `http://localhost:8000/files/${video}`;\n  useEffect(() => {\n    setDuration(videoRef.current.duration);\n  }, []);\n\n  const playPause = () => {\n    if (videoRef.current.paused) {\n      videoRef.current.play();\n      setIsPlaying(true);\n    } else {\n      videoRef.current.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  const updateProgressBar = () => {\n    inputRef.current.value = videoRef.current.currentTime.toString();\n    progressRef.current.value = videoRef.current.currentTime;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Ratio, {\n      aspectRatio: \"16x9\",\n      className: \"w-50 my-3 \",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        onTimeUpdate: () => updateProgressBar,\n        onClick: playPause,\n        ref: videoRef,\n        playsInline: true,\n        autoPlay: true,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: pathToVideo,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn success\",\n      onClick: playPause,\n      children: !isPlaying ? /*#__PURE__*/_jsxDEV(FaPlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 35\n      }, this) : /*#__PURE__*/_jsxDEV(FaPause, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n        ref: progressRef,\n        id: \"progress-bar\",\n        value: curentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef,\n        className: \"seek\",\n        id: \"seek\",\n        value: curentTime,\n        max: duration,\n        type: \"range\",\n        step: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"seek-tooltip\",\n        id: \"seek-tooltip\",\n        children: curentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true);\n}\n\n_s(VideoPlayer, \"/qO4nDGUsfTPkdO4e2Xe+zl2z6U=\");\n\n_c = VideoPlayer;\nexport default VideoPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"sources":["C:/Users/Pokka/Desktop/DEV/videomenthe-test/front/src/components/VideoPlayer.tsx"],"names":["useEffect","useRef","useState","Ratio","FaPlay","FaPause","VideoPlayer","video","videoRef","inputRef","progressRef","isPlaying","setIsPlaying","duration","setDuration","curentTime","setCurrentTime","pathToVideo","current","playPause","paused","play","pause","updateProgressBar","value","currentTime","toString"],"mappings":"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","sourcesContent":["import { LegacyRef, MutableRefObject, ReactEventHandler, useEffect, useRef, useState } from 'react'\r\nimport { Ratio } from 'react-bootstrap'\r\nimport {FaPlay} from 'react-icons/fa'\r\nimport {FaPause} from 'react-icons/fa'\r\nfunction VideoPlayer({video} : any) {\r\n     const videoRef = useRef() as MutableRefObject<HTMLVideoElement>\r\n     const inputRef = useRef() as MutableRefObject<HTMLInputElement>\r\n     const progressRef = useRef() as MutableRefObject<HTMLProgressElement>\r\n\r\n     const [isPlaying, setIsPlaying] = useState<boolean>(true)\r\n     const [duration, setDuration] = useState<number>(0)\r\n     const [curentTime, setCurrentTime] = useState<number>(0)\r\n\r\n     const pathToVideo : string = `http://localhost:8000/files/${video}`\r\n     \r\n     useEffect(() => {\r\n          setDuration(videoRef.current.duration)\r\n     }, [])\r\n     const playPause = () => {\r\n\r\n          if (videoRef.current.paused) {\r\n               videoRef.current.play()\r\n               \r\n               setIsPlaying(true)\r\n          } else {\r\n               videoRef.current.pause()\r\n               setIsPlaying(false)\r\n          }\r\n     }\r\n\r\n     const updateProgressBar = () => {\r\n          inputRef!.current.value = videoRef.current.currentTime.toString()\r\n          progressRef.current.value = videoRef.current.currentTime\r\n     }\r\n\r\n     return (\r\n          <>\r\n               <Ratio aspectRatio='16x9' className='w-50 my-3 '>\r\n                    <video onTimeUpdate={() => updateProgressBar} onClick={playPause} ref={videoRef} playsInline autoPlay>\r\n                         <source  src={pathToVideo} type=\"video/mp4\" />\r\n                    </video>\r\n               </Ratio>\r\n               <button className='btn success' onClick={playPause}>\r\n                    {!isPlaying ? <FaPlay /> : <FaPause />}\r\n               </button>\r\n               <div>\r\n                    <progress ref={progressRef} id=\"progress-bar\" value={curentTime}></progress>\r\n                    <input ref={inputRef} className=\"seek\" id=\"seek\" value={curentTime} max={duration} type=\"range\" step=\"1\"/>\r\n                    <div className=\"seek-tooltip\" id=\"seek-tooltip\">{curentTime}</div>\r\n               </div>\r\n          </>\r\n     )\r\n   }\r\n\r\nexport default VideoPlayer"]},"metadata":{},"sourceType":"module"}