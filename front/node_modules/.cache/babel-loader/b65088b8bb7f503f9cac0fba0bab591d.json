{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pokka\\\\Desktop\\\\DEV\\\\videomenthe-test\\\\front\\\\src\\\\components\\\\VideoPlayer.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport { Ratio } from 'react-bootstrap';\nimport { FaPlay } from 'react-icons/fa';\nimport { FaPause } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction VideoPlayer(_ref) {\n  _s();\n\n  let {\n    video\n  } = _ref;\n  const videoRef = useRef();\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [duration] = useState(videoRef.current.duration);\n  const [curentTime, setCurrentTime] = useState(0);\n  const pathToVideo = `http://localhost:8000/files/${video}`;\n\n  const playPause = () => {\n    if (videoRef.current.paused) {\n      videoRef.current.play();\n      setIsPlaying(true);\n    } else {\n      videoRef.current.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  const updateProgressBar = e => {\n    setCurrentTime(e.currentTarget.currentTime);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Ratio, {\n      aspectRatio: \"16x9\",\n      className: \"w-50 my-3 \",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        onPlaying: () => updateProgressBar,\n        onClick: playPause,\n        ref: videoRef,\n        playsInline: true,\n        autoPlay: true,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: pathToVideo,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn success\",\n      onClick: playPause,\n      children: !isPlaying ? /*#__PURE__*/_jsxDEV(FaPlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 35\n      }, this) : /*#__PURE__*/_jsxDEV(FaPause, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n        id: \"progress-bar\",\n        value: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"seek\",\n        id: \"seek\",\n        value: \"0\",\n        max: duration,\n        type: \"range\",\n        step: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"seek-tooltip\",\n        id: \"seek-tooltip\",\n        children: \"00:00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true);\n}\n\n_s(VideoPlayer, \"rpHfIkjoWZ5ipcZtHKTlRhs27FY=\");\n\n_c = VideoPlayer;\nexport default VideoPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"sources":["C:/Users/Pokka/Desktop/DEV/videomenthe-test/front/src/components/VideoPlayer.tsx"],"names":["useRef","useState","Ratio","FaPlay","FaPause","VideoPlayer","video","videoRef","isPlaying","setIsPlaying","duration","current","curentTime","setCurrentTime","pathToVideo","playPause","paused","play","pause","updateProgressBar","e","currentTarget","currentTime"],"mappings":";;;AAAA,SAA8CA,MAA9C,EAAsDC,QAAtD,QAAsE,OAAtE;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAAQC,MAAR,QAAqB,gBAArB;AACA,SAAQC,OAAR,QAAsB,gBAAtB;;;;AACA,SAASC,WAAT,OAAoC;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAC/B,QAAMC,QAAQ,GAAGP,MAAM,EAAvB;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAU,IAAV,CAA1C;AACA,QAAM,CAACS,QAAD,IAAaT,QAAQ,CAASM,QAAQ,CAACI,OAAT,CAAiBD,QAA1B,CAA3B;AACA,QAAM,CAACE,UAAD,EAAaC,cAAb,IAA+BZ,QAAQ,CAAS,CAAT,CAA7C;AAEA,QAAMa,WAAoB,GAAI,+BAA8BR,KAAM,EAAlE;;AAEA,QAAMS,SAAS,GAAG,MAAM;AAEnB,QAAIR,QAAQ,CAACI,OAAT,CAAiBK,MAArB,EAA6B;AACxBT,MAAAA,QAAQ,CAACI,OAAT,CAAiBM,IAAjB;AAEAR,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACJ,KAJD,MAIO;AACFF,MAAAA,QAAQ,CAACI,OAAT,CAAiBO,KAAjB;AACAT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACJ;AACL,GAVD;;AAYA,QAAMU,iBAAiB,GAAIC,CAAD,IAA4C;AACjEP,IAAAA,cAAc,CAACO,CAAC,CAACC,aAAF,CAAgBC,WAAjB,CAAd;AACJ,GAFD;;AAIA,sBACK;AAAA,4BACK,QAAC,KAAD;AAAO,MAAA,WAAW,EAAC,MAAnB;AAA0B,MAAA,SAAS,EAAC,YAApC;AAAA,6BACK;AAAO,QAAA,SAAS,EAAE,MAAMH,iBAAxB;AAA2C,QAAA,OAAO,EAAEJ,SAApD;AAA+D,QAAA,GAAG,EAAER,QAApE;AAA8E,QAAA,WAAW,MAAzF;AAA0F,QAAA,QAAQ,MAAlG;AAAA,+BACK;AAAS,UAAA,GAAG,EAAEO,WAAd;AAA2B,UAAA,IAAI,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,YADL,eAMK;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAgC,MAAA,OAAO,EAAEC,SAAzC;AAAA,gBACM,CAACP,SAAD,gBAAa,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAAb,gBAA0B,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADhC;AAAA;AAAA;AAAA;AAAA,YANL,eASK;AAAA,8BACK;AAAU,QAAA,EAAE,EAAC,cAAb;AAA4B,QAAA,KAAK,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,cADL,eAEK;AAAO,QAAA,SAAS,EAAC,MAAjB;AAAwB,QAAA,EAAE,EAAC,MAA3B;AAAkC,QAAA,KAAK,EAAC,GAAxC;AAA4C,QAAA,GAAG,EAAEE,QAAjD;AAA2D,QAAA,IAAI,EAAC,OAAhE;AAAwE,QAAA,IAAI,EAAC;AAA7E;AAAA;AAAA;AAAA;AAAA,cAFL,eAGK;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,EAAE,EAAC,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHL;AAAA;AAAA;AAAA;AAAA;AAAA,YATL;AAAA,kBADL;AAiBD;;GAzCKL,W;;KAAAA,W;AA2CT,eAAeA,WAAf","sourcesContent":["import { MutableRefObject, ReactEventHandler, useRef, useState } from 'react'\r\nimport { Ratio } from 'react-bootstrap'\r\nimport {FaPlay} from 'react-icons/fa'\r\nimport {FaPause} from 'react-icons/fa'\r\nfunction VideoPlayer({video} : any) {\r\n     const videoRef = useRef() as MutableRefObject<HTMLVideoElement>\r\n     const [isPlaying, setIsPlaying] = useState<boolean>(true)\r\n     const [duration] = useState<number>(videoRef.current.duration)\r\n     const [curentTime, setCurrentTime] = useState<number>(0)\r\n\r\n     const pathToVideo : string = `http://localhost:8000/files/${video}`\r\n     \r\n     const playPause = () => {\r\n\r\n          if (videoRef.current.paused) {\r\n               videoRef.current.play()\r\n               \r\n               setIsPlaying(true)\r\n          } else {\r\n               videoRef.current.pause()\r\n               setIsPlaying(false)\r\n          }\r\n     }\r\n\r\n     const updateProgressBar = (e : React.MouseEvent<HTMLVideoElement>) => {\r\n          setCurrentTime(e.currentTarget.currentTime)\r\n     }\r\n\r\n     return (\r\n          <>\r\n               <Ratio aspectRatio='16x9' className='w-50 my-3 '>\r\n                    <video onPlaying={() => updateProgressBar} onClick={playPause} ref={videoRef} playsInline autoPlay>\r\n                         <source  src={pathToVideo} type=\"video/mp4\" />\r\n                    </video>\r\n               </Ratio>\r\n               <button className='btn success' onClick={playPause}>\r\n                    {!isPlaying ? <FaPlay /> : <FaPause />}\r\n               </button>\r\n               <div>\r\n                    <progress id=\"progress-bar\" value=\"0\"></progress>\r\n                    <input className=\"seek\" id=\"seek\" value=\"0\" max={duration} type=\"range\" step=\"1\"/>\r\n                    <div className=\"seek-tooltip\" id=\"seek-tooltip\">00:00</div>\r\n               </div>\r\n          </>\r\n     )\r\n   }\r\n\r\nexport default VideoPlayer"]},"metadata":{},"sourceType":"module"}